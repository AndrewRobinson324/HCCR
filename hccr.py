import io
import torch
from torch import nn, save, load
from torch.optim import Adam
from torch.utils.data import DataLoader, Dataset
from torchvision.transforms import ToTensor
import torch.nn.functional as F
import os
from PIL import Image

torch.cuda.set_per_process_memory_fraction(0.9)
torch.cuda.empty_cache()


class ChineseDataset(Dataset):
    def __init__(self, root_dir, transform=None):
        self.root_dir = root_dir
        self.transform = transform
        self.image_files = [os.path.join(root_dir, file) for file in os.listdir(root_dir) if file.endswith('.gnt')]
        self.samples = []
        self.labels = []
        self.num_classes = 0

        for file_name in self.image_files:
            samples, labels = self.gnt_read_images(file_name)
            self.samples.extend(samples)
            self.labels.extend(labels)

    def __len__(self):
        return len(self.samples)

    def __getitem__(self, idx):
        img = self.samples[idx]
        label = self.labels[idx]

        # Apply transformations if any
        if self.transform:
            img = self.pad_to_size(self.transform(img), 256)
            label_int_sequence = [ord(char) for char in label.decode('gb18030')]
            label_mapped = [ord(char) % 3755 for char in label.decode('gb18030')]

            label_tensor = torch.tensor(label_mapped)

        sample = {'image': img, 'label': label_tensor}

        return sample

    def pad_to_size(self, tensor, target_size):
        _, h, w = tensor.size()

        # Calculate padding values
        pad_h = max(0, target_size - h)
        pad_w = max(0, target_size - w)

        # Apply padding
        tensor = F.pad(tensor, (0, pad_w, 0, pad_h), value=255)

        return tensor

    def gnt_read_images(self, file_name):
        samples = []
        labels = []

        try:
            with open(file_name, 'rb') as image_file:
                image_file.seek(0, 2)
                file_length = image_file.tell()
                image_file.seek(0, 0)

                while image_file.tell() < file_length:
                    # skip length
                    int.from_bytes(image_file.read(4), byteorder='little')
                    # image label
                    label = image_file.read(2)
                    # image dimensions
                    width = int.from_bytes(image_file.read(2), byteorder='little')
                    height = int.from_bytes(image_file.read(2), byteorder='little')
                    # bitmap of gray-scale image
                    image_bitmap = bytearray(image_file.read(width * height))

                    img = Image.frombytes('L', (width, height), bytes(image_bitmap))

                    samples.append(img)
                    labels.append(label)

                self.num_classes = len(set(self.labels))

        except FileNotFoundError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"An error occurred: {e}")

        return samples, labels


# Image Classifier Neural Network
class ImageClassifier(nn.Module):
    def __init__(self):
        super().__init__()
        self.model = nn.Sequential(
            nn.Conv2d(1, 4, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(4, 8, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(8, 16, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Flatten(),
            nn.Linear(8 * 32 * 32, 32),
            nn.ReLU(),
            nn.Linear(32, 3755)
        )

    def forward(self, x):
        return self.model(x)


# Instance of the neural network, loss, optimizer
clf = ImageClassifier().to('cuda')
opt = Adam(clf.parameters(), lr=1e-3)
loss_fn = nn.CrossEntropyLoss()

# Training flow
if __name__ == "__main__":
    chinese_dataset = ChineseDataset(root_dir="data/competition-gnt", transform=ToTensor())
    dataset = DataLoader(chinese_dataset, batch_size=4, shuffle=True)

    for epoch in range(10):  # train for 10 epochs
        batch_num = 0
        for batch in dataset:
            print(f"Batch {batch_num} started")
            X, y = batch['image'], batch['label']
            X = X.float().to('cuda')
            y = y.squeeze(dim=1).to('cuda')
            yhat = clf(X)
            loss = loss_fn(yhat, y)

            # Apply backprop
            opt.zero_grad()
            loss.backward()
            opt.step()

            batch_num += 1
            torch.cuda.empty_cache()

        print(f"Epoch:{epoch} loss is {loss.item()}")

    with open('model_state_chinese.pt', 'wb') as f:
        save(clf.state_dict(), f)

    with open('model_state_chinese.pt', 'rb') as f:
        clf.load_state_dict(load(f))

    # æŸž
    byte_array = bytes.fromhex(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcd\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x84\xac}\x80\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x94\xa4gc\x9c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x91\x93aV\xc1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfb\xa6u~[\\\xdd\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xed\x82a\\WW\xe1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdc\xe8\x8aj]RP\xd9\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb6\xb9\x90cWLQ\xb3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffq^YGVK]\x90\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x90\xb8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffcPXJRG\x82\xed\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa0\x9a\xd8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffqGNQEI\x9c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x83\x98\xa0\xd5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x94_FOKGO\xb0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa9\xa6\x9b\x94\x92\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa6RJLFM\x81\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd6\xb0\x96\x8a\xaa\xdb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc5iMTXY\xd5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xc2\x8c\x88\xa0\xa4\xdc\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaf\x9eUXRt\xf0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc1i\x7frzg\x92\xb5\xbe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x82\xb1nPJ\xca\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x85QQZV\x82\x8d\xb0\x9c\x82\xdc\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc6\x9c{ZU\xe3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`MUJ?\x7f\x97\x8f\x97\x8c\x89\xc6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcf\x8d\x8bcs\xed\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffeGOIEK\xa9^i\x85}^\x80\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb0p\x94\x97\x82\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc3FKT@A\xa0\xacQa`CMx\xba\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd0\x91\x9f\xb2\xd0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf4\xecVNF?A\x9d\xeb\xa0CIH;Rt\xd6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbb\xa3\x94\xcb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdb\xc4\xe4\xe4wNYYJ}\xea\x98@7IIDO\xa8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc5\xa2\xa6\xa2\xdb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff~eMl\x98|XY[BY\xe1\x97\x996FBFTW\xc2\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe4\xc5\x8d\x85\xab\xcb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft[PMJPBVbSC`\xdc\xe8\xec\x8f=IHGE\x89\xf3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdd\x98\x89u\xc3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8bciS=<?:Q[:I\xb3\xec\xe9\xe1\x8dO:BF[\xe4\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\xa9\xad\x9c\xda\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbb\xab\x95w\x80H@09;7Cj\xb8\xa0\xd5\xc1RE@>R\xab\xef\xff\xff\xff\xff\xff\xff\xff\xc6\xd6\xba\x9e\xa0\xf0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x9d|\xa9[U42902CJKZf@DC8J\x84\xe2\x8c\xd9\xbds\xa5\xce\xd5\xb9\xcd\xc4\x89\xa5\xff\xff\xff\xff\xff\xd7v\xa2\xc5\xc2\xe2\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe1\xb5h^X>1304BD>?97E@Ph\xe5\xca\x9f\xb2\x93v\x81\xbe\xd0\xc4\xbf\xa9\xe5\xff\xff\xff\xff\xa3pPT[o\xa8\xe4\xeb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xadceNA<54LPHGA9DAJn\xec\xdb\x85\xcc\xd9\xbd\x9a\x84\xc8\xcc\xc4\xca\xff\xff\xff\xff\xd6iW@O:CMm\x87\xc5\xcb\xb5\xc1\xac\xa2\xc1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffr\xa5bL@<1BORE>GPOY\xaf\xea\x90j\xcf\xa2\xa1\xc2u\x90\xc2\xc3\xe2\xff\xff\xff\xff\x85SM@UB=HQQTXN[PI_\x9c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x9dzSECWdP`Oglk\xc5\xfa\xec`^\xd2\xab\xad\xc5\x9d\x8d\xb2\xda\xff\xff\xff\xff\xb8t[aa]OMSL]EBB<EHSo\xe8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8\xc1\x95lSN\x97\xb4\xca\xba\xaa\xa2\xbf\xd7\xff\xff\xffc\x81\xe3\xea\xe9\xd3\xb3\x8f\x9b\xee\xff\xff\xff\xff\xde\x94l\x8a\xd2\xa8u][[TRG@HaRZi\xec\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xeb\xeb\xd4\xe5\xcc\x82ld^g\xae\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc8\xff\xff\xff\xd9\xa8w\x95\xee\xff\xff\xff\xff\xa9\x7fz\xbb\xd8\xf7\xc1q\xac\x84^ULHTPdb\x81\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb4\x99\x8e`\xa2\xa9\x7f`kd\xbc\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdb\xb2\x8e\xb4\xe3\xff\xff\xff\xff\x8a\x7f\xc2\xd7\xff\xff\xff\xd8\xef\xe6\xafPIKMT\x85\xaf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd2\xa6\xab\x88y\x91s\x9f\x82qu\xda\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xca\xb1\xab\xca\xff\xff\xff\xff\xff\xaa\xe7\xff\xff\xff\xff\xff\xf8\xd3\xa3cO]Y\x97\xe5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe3\xd1\x98\xac\x97\x83\x92k\x92\x88}u\x91\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xcc\xab\xaf\xa3\xce\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa6ncWq\x8f\x82\xe7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x82\xc9\xc5l\xb3\xb5u\x87r{itv\x82\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdd\xd6\x80\x9c\x82~\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfflsUc\x92\xc4\x8b\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8ba\xac\xc1\xa4\xd0\xe9\xa7\x89\x90YKvo\x99\xf4\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xde\xe5\xc9\x8d~\x8a\xf1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xae\xa9\x98\x8d\xd4\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91XMz\xa9\xca\xe3\xfa\xe4\x8f\x9bcsuz\x8d\xea\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf1\xc5\x8fu|\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\xc5\xc8\xd3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf8fMG_\x93\xdc\xff\xff\xe9\x96\x9c]\x83z\x82~\x9d\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe0\x85}of\xa6\xf6\xff\xff\xff\xff\xff\xff\xff\xff\xc9\xc8\xdc\xe1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdaV:MSf\x9a\xff\xff\xff\x9f\x9cGvurm\x83\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xda\x94|Zo\xe0\xff\xff\xff\xff\xffu\xe6\xdf\x8d\xbd\xdf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x9bc?OR\x7f\xce\xff\xff\xff\xa4\xa8g\x7fqio\xda\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa\xf8\xa8\x8bl`\xd0\xeb\xff\xff\xff\xe2\xbb\xd1\xd0\xb3\xc7\xe1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc1\xa1{[o\xcb\xff\xff\xff\xff\xbd\xb2`vwfq\xda\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb7\xff\xff\xe7\xb2\x8d[g\x9b\xdb\xa5\xff\xe9\xca\x9c\xa8\x9f\xaa\x8c\x8b\xb7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbe\xb6}\x9d\xdb\xff\xff\xff\xff\xff\xc1\xadik\x87vmj\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x9ac\xbe\xbb\xa0\xb3\x8afHZ\x86i\xa9\xc4\xb9no^O\\ZP\x97\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbe\xba\x81\xcb\xf6\xff\xff\xff\xff\xf4\xc4\xbdsK\x7fr\x80\xcf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe4}c\x90\xe7\xd4\xc6\x90}KIk\x94\xc5\xc7\xc8\xac\x8fp^TTOb\xce\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc1\xc0\xc0\xd2\xf4\xf9\xff\xff\xff\xf4\xe1\xc5\xa8m^kdr\xed\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7pd\xab\xf6\xe0\xdf\x93yZI\x80\xc3\xce\xd6\xd9\xd7\xc9\x9fpXJSW\x8c\xf7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xc7\xc8\xcf\xc3\x97\x92\x8c\x97\xa6zobOLM@O\xb9\xed\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc1\x9ce^\xe2\xff\xff\xe7\xafb[[r\x8f\xde\xff\xff\xff\xff\xe8yaOSZ\x85\xf0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x9c\xbd\xc1x{i`U]^YFK97B5-Q\x87\xab\xae\xf3\xff\xff\xff\xff\xff\xff\xaeqdc\xe5\xff\xff\xeb\xa7]`ks\x9f\xff\xff\xff\xff\xff\xff\xd8xbXO\x9d\xf8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb3\xae\xb0\xb3x\x8dul^V^UQQEDAG=AJVp\xad\xe2\xff\xff\xff\xff\xe8\x99W\\q\xf1\xff\xff\xf9\xa7\x80\x81f}\xe1\xff\xff\xff\xff\xff\xff\xf5\x8a]Ra\xa8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcf\xba\x9e\xad\xad\x96\x96\x86vxz\x84jmmQMBIHBUHKRm\xac\xe7\xe4\xd8\xa1eXSj\xf3\xff\xff\xff\xc9\x89fm\x8c\xe3\xff\xff\xff\xff\xff\xff\xff\x85vnj\xd3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcb\xc3\x96\x85\xb4\xb9\x98\xcc\xcb\xc9\x84\xda\xec\x9a~\xc7\x94EFRQY\\KFNGDz\x81tPHRFs\xf9\xff\xff\xff\xcd\x89Vhs\x8f\xff\xff\xff\xff\xff\xff\xff\x91\x8d\x85o\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\xcf\xce\xbe\xe1\xec\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe5\xadVsoI]qUHWRQOUKBQQ`\x9a\xff\xff\xff\xff\xe5\xa3{pm\xbd\xff\xff\xff\xff\xff\xff\xff\xba\xbd\xae\x94\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcf\xdb\xcd\xdb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbedz\x82l\xa3\xc4\x9fvi^U[]TSVc\x91\xe9\xff\xff\xff\xff\xf1\xae|jn\xd5\xff\xff\xff\xff\xff\xff\xff\xcf\xcf\xbe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc3l}|{\xd4\xf8\xc1\xbf\xbd\x94jdikY~\xbc\xe0\xff\xff\xff\xff\xff\xff\xb5\x84nj\x8f\xff\xff\xff\xff\xff\xff\xff\xd7\xd3\xc9\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcf[\x7f{k\xc1\xff\xff\xff\xff\xff\xff\xb0\x9f\x98p\xd7\xff\xff\xff\xff\xff\xff\xff\xff\xafixm\xc0\xff\xff\xff\xff\xff\xff\xff\xb2\xd6\xd1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\\\x84\x82}\xde\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbd\x8b}s\xbb\xff\xff\xff\xff\xff\xff\xad\xc6\xd7\xe3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb9ev\x8a\x82\xbd\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb9\x95zl\x9a\xff\xff\xff\xff\xff\xe1\xc1\xc1\xc5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7W}\x8bkr\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x8bur\x89\x8c\xff\xff\xff\xff\xd0\x92\xac\xc9\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xccsn\x81y\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe8\x9a}\x86\x87\xd7\xff\xff\xff\xdb\xca\xa0\xaa\xe5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc6rn\x88\x83\xe0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf1\xb6\x81\x7f\x8f\xe7\xff\xff\xff\xda\xd1\xb4\xb0\xf2\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc6l~\x87\x88\xdb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaez\x80d\xd5\xff\xff\xff\xc7\xb8{\x89\xe1\xf2\xc2\xa4\x99\xa0\xb7\xbc\xbf\xa0\xc6\xe4\x89\xc3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc6es~o\xc6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa3z\x82\x80\xe9\xff\xff\xc2\xc8\x91\\j\xa4\x9dU\\VTNacNZoc\x82\xad\xb1f\xe2\xf6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd2|z\x83\x81\xbe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf5\xb5\x8e\x83\x82\xe3\xf9\xf3\xcd\x93c]W}gOb^f`]R^DUWZe`Rz\xa1\x87\x8f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbf}t\x8e\x94\xd9\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe7\xaf\x8b\x84|\xdc\xf6\xd1\x9enR]luymfqknoqfTXS[OZ^bhYf\xc6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbbmq\x89\x9a\xd1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa4\x8c\x86d\x8f\xd0v\x8e\x8fkb\x84\x9a\xa8\x83\x96\xa9\x9b~z\x86qwt`jaaO^\\d\x7f\xe6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb4Up\x89s\xcd\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb2\x8e\x8ar\x9e\xc3\xa0\xa7\xa0\xaa\xb2\xd8\xf6\xff\xff\xff\xff\xff\xff\xeb\xeb\xd1\xd4\xe4\xa4\x9e\x90\x85t\x83\x8c\xaf\xed\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc4pp\x8b\x97\xe9\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbf\x94\x8dl\x82\xc6\xbd\xa3\xb1\xd9\xd7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe8\xef\xf2\xdb\xdd\xee\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbemd\x86\x90\xee\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x85\x93\x88bj\xc3\xbb\x92\xf5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbbVk\x85q\xc5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbd\x9c\x92\x8fu\xc7\xd5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xec\xc5\x8b\x81\x83|\xe9\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd4\x9a\x90{\x87\xdd\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xef\xb5{\x87\x91\x9f\xeb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xae\x92\x8b\x83\x9b\xdc\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe5\x8cb\x8c\x8b\xa5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8e\xa2\x91\x7f\x8a\xec\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd7\xb1\x90\x8e\x8e\xb4\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb9\xa5\x99\x98\xb6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd8\xc1\x97\x8b\x94\xc9\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbf\xa0\x96\x9c\xe7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd4\xb0l\x98\x9f\x8f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa0\x98\x9e\xa7\xea\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xba\x90\xa5\xb0\xcc\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff~\x95\x92\x80\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xc1\x9e\x94\xa2\xf1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xa5\x9c\xa6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe8\xb9\x9a\x92\xae\xfa\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xad\xb6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xda\xber\x89\xa8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xbf\x88\x94\xc3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb2\xae\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
    img_tensor = ToTensor()(byte_array).unsqueeze(0).unsqueeze(1).float().to('cuda')

    print(torch.argmax(clf(img_tensor)))
